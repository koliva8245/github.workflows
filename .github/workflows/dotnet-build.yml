name: Build

on:
  workflow_call:
    inputs:
      dotnet-sdk:
        required: true
        type: string
      main-project:
        required: true
        type: string
      artifact-name-prefix:
        required: true
        type: string
      is-tool:
        required: true
        type: boolean
    secrets:
      es-username:
        required: true
      es-password:
        required: true
      es-credential-id:
        required: true
      es-totp-secret:
        required: true
        
env:
  PUBLISH_ANY_PATH: ./bin/publish/any
  PUBLISH_FDE_WIN_PATH: ./bin/publish/fde/win-x64
  PUBLISH_FDE_OSX_PATH: ./bin/publish/fde/osx-x64
  PUBLISH_FDE_LINUX_PATH: ./bin/publish/fde/linux-x64
  PUBLISH_SCD_WIN_PATH: ./bin/publish/scd/win-x64
  PUBLISH_SCD_OSX_PATH: ./bin/publish/scd/osx-x64
  PUBLISH_SCD_LINUX_PATH: ./bin/publish/scd/linux-x64
  NUPKG_PATH: ./bin/nupkg/any
  PACKAGE_VERSION_FILE: ./version.txt
  
jobs:
  build-test:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        configuration: [Debug, Release]
        include:
          - os: windows-latest
            configuration: Debug
            cache: true

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        
    - name: Cache checkout
      if: ${{ matrix.cache }}
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}
        key: checkout-${{ github.run_id }}-${{ github.run_attempt }}
          
    - name: Use dotnet sdk
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-sdk }}

    - name: Build
      run: dotnet build -c ${{ matrix.configuration }}

    - name: Test
      run: dotnet test -c ${{ matrix.configuration }} --no-build
           
  package:
    needs: build-test
    runs-on: windows-latest
    steps:
    - name: Cache checkout
      id: cache-checkout
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}
        key: checkout-${{ github.run_id }}-${{ github.run_attempt }}
        
    - name: Checkout
      if: steps.cache-checkout.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Use dotnet sdk
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-sdk }}

    - name: Set non-main branch version build number
      shell: pwsh
      if: github.ref != 'refs/heads/main'
      run: | 
        $xml = [Xml] (Get-Content ${{ inputs.main-project }})
        $version = $xml.Project.PropertyGroup.Version
        $version = "$version".Trim()
        echo "Got version from project - '$version'"
        
        $first_part_version = $version
        
        $split_index = $version.IndexOf('-')
        if ($split_index -gt -1)
        {
          $first_part_version = $version.Substring(0, $split_index)
        }
                
        $new_version = $first_part_version + "-build.${{ github.run_number }}"
        echo "New version - '$new_version'"
        echo "Old version - '$version'"
        $content = Get-Content ${{ inputs.main-project }}
        $content | % { $_.Replace("<Version>$version</Version>", "<Version>$new_version</Version>") } | Set-Content ${{ inputs.main-project }}

    - name: Get package version
      shell: pwsh
      run: |
        $xml = [Xml] (Get-Content ${{ inputs.main-project }})
        $version = $xml.Project.PropertyGroup.Version
        $version = "$version".Trim()
        echo "Got version - '$version'"
        echo "VERSION=$version" | Out-File -FilePath ${{ env.PACKAGE_VERSION_FILE }} -Encoding utf8 -Append
        
    - name: Publish release [fdd-any]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} -o $env:PUBLISH_ANY_PATH

    - name: Nuget Pack (no-build)
      if: ${{ inputs.is-tool }}
      run: dotnet pack ${{ inputs.main-project }} --no-build -o $env:NUPKG_PATH  

    - name: Nuget Pack
      if: ${{ !inputs.is-tool }}
      run: dotnet pack ${{ inputs.main-project }} -o $env:NUPKG_PATH  
      
    - name: FDE and SCD Prep
      if: ${{ inputs.is-tool }}     
      shell: pwsh
      run: |
        $content = Get-Content ${{ inputs.main-project }}
        $content | % { $_.Replace("<PublishSingleFile>false</PublishSingleFile>", "<PublishSingleFile>true</PublishSingleFile>") } | Set-Content ${{ inputs.main-project }}
        
    - name: Publish release [fde-win-x64]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} --self-contained false -r win-x64 -o $env:PUBLISH_FDE_WIN_PATH

    - name: Publish release [fde-osx-x64]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} --self-contained false -r osx-x64 -o $env:PUBLISH_FDE_OSX_PATH

    - name: Publish release [fde-linux-x64]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} --self-contained false -r linux-x64 -o $env:PUBLISH_FDE_LINUX_PATH

    - name: Publish release [scd-win-x64]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} --self-contained true -r win-x64 -o $env:PUBLISH_SCD_WIN_PATH

    - name: Publish release [scd-osx-x64]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} --self-contained true -r osx-x64 -o $env:PUBLISH_SCD_OSX_PATH

    - name: Publish release [scd-linux-x64]
      if: ${{ inputs.is-tool }}
      run: dotnet publish ${{ inputs.main-project }} --self-contained true -r linux-x64 -o $env:PUBLISH_SCD_LINUX_PATH
            
    - name: Cache publish files
      if: ${{ inputs.is-tool }}
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ env.PUBLISH_ANY_PATH }}
          ${{ env.PUBLISH_FDE_WIN_PATH }}
          ${{ env.PUBLISH_FDE_OSX_PATH }}
          ${{ env.PUBLISH_FDE_LINUX_PATH }}
          ${{ env.PUBLISH_SCD_WIN_PATH }}
          ${{ env.PUBLISH_SCD_OSX_PATH }}
          ${{ env.PUBLISH_SCD_LINUX_PATH }}
        key: publish-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true

    - name: Cache nuget packages
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ env.NUPKG_PATH }}
          ${{ env.PACKAGE_VERSION_FILE }}
        key: nuget-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true
        
  sign-nuget:
    needs: package
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Restore nuget file
      id: nuget-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ env.NUPKG_PATH }}
          ${{ env.PACKAGE_VERSION_FILE }}
        key: nuget-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true
        fail-on-cache-miss: true

    - name: Get version
      shell: bash
      run: |
        . version.txt
        echo $VERSION
        echo "version=$VERSION" | tr -d '\r\n' >> "$GITHUB_ENV"
        
    - name: Download and Unzip CodeSignTool
      run: |
        Invoke-WebRequest -OutFile CodeSignTool.zip "https://www.ssl.com/download/codesigntool-for-windows/"
        Expand-Archive -Force CodeSignTool.zip
        Remove-Item CodeSignTool.zip
        Add-Content -Path .\CodeSignTool\conf\code_sign_tool.properties -Value "`nTSA_LEGACY_URL=http://ts.ssl.com/legacy"

    - name: Sign artifacts (tool)
      if: ${{ inputs.is-tool }}
      run: |
        $path = $env:NUPKG_PATH -replace "/", "\"
        $relativePath = $path +  '\' + '${{ inputs.artifact-name-prefix }}' + '.' + '${{ env.version }}' + '.nupkg'
        $npath = Resolve-Path -Path (Join-Path -Path '${{ github.workspace }}' -ChildPath $relativePath)
        echo "$npath"
        
        cd CodeSignTool
        .\CodeSignTool.bat sign -username=${{ secrets.es-username }} -password=${{ secrets.es-password }} -credential_id=${{ secrets.es-credential-id }} -totp_secret=${{ secrets.es-totp-secret }} -input_file_path="$npath" -override
        
        $outputN = nuget verify -Signatures $npath
        if ($outputN -like '*failed*') { exit 1 }
        
    - name: Sign artifacts (library)
      if: ${{ !inputs.is-tool }}
      run: |
        $path = $env:NUPKG_PATH -replace "/", "\"
        $relativePath = $path +  '\' + '${{ inputs.artifact-name-prefix }}' + '.' + '${{ env.version }}' + '.nupkg'
        $npath = Resolve-Path -Path (Join-Path -Path '${{ github.workspace }}' -ChildPath $relativePath)
        echo "$npath"

        $spath = $npath -replace '\.nupkg$', '.snupkg'
        $tempSPath = $spath -replace '\.snupkg$', '.symbols.nupkg'
        Rename-Item -Path $spath -NewName $tempSPath
        echo "$tempSPath"

        cd CodeSignTool
        .\CodeSignTool.bat sign -username=${{ secrets.es-username }} -password=${{ secrets.es-password }} -credential_id=${{ secrets.es-credential-id }} -totp_secret=${{ secrets.es-totp-secret }} -input_file_path="$npath" -override
        .\CodeSignTool.bat sign -username=${{ secrets.es-username }} -password=${{ secrets.es-password }} -credential_id=${{ secrets.es-credential-id }} -totp_secret=${{ secrets.es-totp-secret }} -input_file_path="$tempSPath" -override
        
        $outputN = nuget verify -Signatures $npath
        if ($outputN -like '*failed*') { exit 1 }
        $outputS = nuget verify -Signatures $tempSPath
        if ($outputS -like '*failed*') { exit 1 }

        cd ..
        Rename-Item -Path $tempSPath -NewName $spath
        echo "$spath"
        
    - name: Cache signed nuget packages
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ env.NUPKG_PATH }}
          ${{ env.PACKAGE_VERSION_FILE }}
        key: nuget-signed-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true
        
  upload-artifacts:
    needs: sign-nuget
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    - name: Restore publish files
      if: ${{ inputs.is-tool }}
      id: publish-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ env.PUBLISH_ANY_PATH }}
          ${{ env.PUBLISH_FDE_WIN_PATH }}
          ${{ env.PUBLISH_FDE_OSX_PATH }}
          ${{ env.PUBLISH_FDE_LINUX_PATH }}
          ${{ env.PUBLISH_SCD_WIN_PATH }}
          ${{ env.PUBLISH_SCD_OSX_PATH }}
          ${{ env.PUBLISH_SCD_LINUX_PATH }}
        key: publish-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true
        fail-on-cache-miss: true
        
    - name: Restore signed nuget file
      id: nuget-signed-cache
      uses: actions/cache/restore@v4
      if: github.ref == 'refs/heads/main'
      with:
        path: |
          ${{ env.NUPKG_PATH }}
          ${{ env.PACKAGE_VERSION_FILE }}
        key: nuget-signed-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true
        fail-on-cache-miss: true

    - name: Restore nuget file
      id: nuget-cache
      uses: actions/cache/restore@v4
      if: github.ref != 'refs/heads/main'
      with:
        path: |
          ${{ env.NUPKG_PATH }}
          ${{ env.PACKAGE_VERSION_FILE }}
        key: nuget-${{ github.run_id }}-${{ github.run_attempt }}
        enableCrossOsArchive: true
        fail-on-cache-miss: true
      
    - name: Get version
      run: |
        . version.txt
        echo $VERSION
        echo "version=$VERSION" | tr -d '\r\n' >> "$GITHUB_ENV"
        
    - name: Archive [fdd-any] zip
      if: ${{ inputs.is-tool }}
      run: 7z a -tzip '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-fdd-any.zip' '${{ env.PUBLISH_ANY_PATH }}'

    - name: Archive [fdd-any] tar
      if: ${{ inputs.is-tool }}
      shell: pwsh
      run: |
        $lastPart = (Split-Path ${{ env.PUBLISH_ANY_PATH }} -Leaf)
        $parentPath = (Split-Path ${{ env.PUBLISH_ANY_PATH }} -Parent)
        tar -czvf '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-fdd-any.tar.gz' -C $parentPath $lastPart

    - name: Archive [fde-win-x64]
      if: ${{ inputs.is-tool }}
      run: 7z a -tzip '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-fde-win-x64.zip' '${{ env.PUBLISH_FDE_WIN_PATH }}'

    - name:  Archive Archive [fde-osx-x64]
      if: ${{ inputs.is-tool }}
      shell: pwsh
      run: |
        $lastPart = (Split-Path ${{ env.PUBLISH_FDE_OSX_PATH }} -Leaf)
        $parentPath = (Split-Path ${{ env.PUBLISH_FDE_OSX_PATH }} -Parent)
        tar -czvf '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-fde-osx-x64.tar.gz' -C $parentPath $lastPart

    - name:  Archive [fde-linux-x64]
      if: ${{ inputs.is-tool }}
      shell: pwsh
      run: |
        $lastPart = (Split-Path ${{ env.PUBLISH_FDE_LINUX_PATH }} -Leaf)
        $parentPath = (Split-Path ${{ env.PUBLISH_FDE_LINUX_PATH }} -Parent)
        tar -czvf '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-fde-linux-x64.tar.gz' -C $parentPath $lastPart
        
    - name: Archive [scd-win-x64]
      if: ${{ inputs.is-tool }}
      run: 7z a -tzip '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-scd-win-x64.zip' '${{ env.PUBLISH_SCD_WIN_PATH }}'

    - name:  Archive [scd-osx-x64]
      if: ${{ inputs.is-tool }}
      shell: pwsh
      run: |
        $lastPart = (Split-Path ${{ env.PUBLISH_SCD_OSX_PATH }} -Leaf)
        $parentPath = (Split-Path ${{ env.PUBLISH_SCD_OSX_PATH }} -Parent)
        tar -czvf '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-scd-osx-x64.tar.gz' -C $parentPath $lastPart

    - name:  Archive [scd-linux-x64]
      if: ${{ inputs.is-tool }}
      shell: pwsh
      run: |
        $lastPart = (Split-Path ${{ env.PUBLISH_SCD_LINUX_PATH }} -Leaf)
        $parentPath = (Split-Path ${{ env.PUBLISH_SCD_LINUX_PATH }} -Parent)
        tar -czvf '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.version }}-scd-linux-x64.tar.gz' -C $parentPath $lastPart
        
    - name: Upload artifacts [fdd-any] zip
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-fdd-any (zip)
        path: "${{ runner.temp }}/*-fdd-any.zip"
        if-no-files-found: error
        
    - name: Upload artifacts [fdd-any] tar
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-fdd-any (tar)
        path: "${{ runner.temp }}/*-fdd-any.tar.gz"
        if-no-files-found: error

    - name: Upload artifacts [fde-win-x64]
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-fde-win-x64
        path: "${{ runner.temp }}/*-fde-win-x64.zip"
        if-no-files-found: error

    - name: Upload artifacts [fde-osx-x64]
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-fde-osx-x64
        path: "${{ runner.temp }}/*-fde-osx-x64.tar.gz"
        if-no-files-found: error

    - name: Upload artifacts [fde-linux-x64]
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-fde-linux-x64
        path: "${{ runner.temp }}/*-fde-linux-x64.tar.gz"
        if-no-files-found: error

    - name: Upload artifacts [scd-win-x64]
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-scd-win-x64
        path: "${{ runner.temp }}/*-scd-win-x64.zip"
        if-no-files-found: error

    - name: Upload artifacts [scd-osx-x64]
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-scd-osx-x64
        path: "${{ runner.temp }}/*-scd-osx-x64.tar.gz"
        if-no-files-found: error

    - name: Upload artifacts [scd-linux-x64]
      if: ${{ inputs.is-tool }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-scd-linux-x64
        path: "${{ runner.temp }}/*-scd-linux-x64.tar.gz"
        if-no-files-found: error
        
    - name: Upload Artifacts - Nuget
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-Nuget
        path: ${{ env.NUPKG_PATH }}/
        if-no-files-found: error
