name: Build

on:
  workflow_call:
    inputs:
      dotnet-sdk:
        required: true
        type: string
      main-project:
        required: true
        type: string
      artifact-name-prefix:
        required: true
        type: string   
        
env:
  PUBLISH_ANY_PATH: ./bin/publish/any
  NUPKG_PATH: ./bin/nupkg/any
  
jobs:
  build-test:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use dotnet sdk
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-sdk }}

    - name: Build
      run: dotnet build -c ${{ matrix.configuration }}

    - name: Test
      run: dotnet test -c ${{ matrix.configuration }} --no-build
           
  package:
    needs: build-test
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use dotnet sdk
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-sdk }}

    - name: Set non-main branch version build number
      shell: pwsh
      if: github.ref != 'refs/heads/main'
      run: | 
        $xml = [Xml] (Get-Content ${{ inputs.main-project }})
        $version = $xml.Project.PropertyGroup.Version
        echo "Current version - $version"
        $first_part_version,$build_version = $version.Split("-")
        $new_version = $first_part_version + "-build.${{ github.run_number }}"        
        $content = Get-Content ${{ inputs.main-project }}
        $content | % { $_.Replace("<Version>$version</Version>", "<Version>$new_version</Version>") } | Set-Content ${{ inputs.main-project }}

    - name: Get package version
      shell: pwsh
      run: |
        $xml = [Xml] (Get-Content ${{ inputs.main-project }})
        $version = $xml.Project.PropertyGroup.Version
        echo "New version - $version"
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    - name: Publish
      run: dotnet publish ${{ inputs.main-project }} -o $env:PUBLISH_ANY_PATH

    - name: Nuget Pack
      run: dotnet pack ${{ inputs.main-project }} --no-build -o $env:NUPKG_PATH 

    - name: Archive Release Files - Zip
      run: 7z a -tzip '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.VERSION }}.zip' '${{ env.PUBLISH_ANY_PATH }}'

    - name: Archive Release Files - Tar
      shell: pwsh
      run: |
        $lastPart = (Split-Path ${{ env.PUBLISH_ANY_PATH }} -Leaf)
        $parentPath = (Split-Path ${{ env.PUBLISH_ANY_PATH }} -Parent)
        tar -czvf '${{ runner.temp }}/${{ inputs.artifact-name-prefix }}.${{ env.VERSION }}.tar.gz' -C $parentPath $lastPart
        
    - name: Upload Artifacts - Release Files - Zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name-prefix }}
        path: "${{ runner.temp }}/*.zip"
        if-no-files-found: error
        
    - name: Upload Artifacts - Release Files - Tar
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name-prefix }}
        path: "${{ runner.temp }}/*.tar.gz"
        if-no-files-found: error
        
    - name: Upload Artifacts - Nuget
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name-prefix }}-Nuget
        path: ${{ env.NUPKG_PATH }}/
        if-no-files-found: error
        
